---
import MainLayout from '../layouts/main.astro';
import CategoryGrid from '../components/CategoryGrid.astro';
import SearchAndFilter from '../components/SearchAndFilter.astro';
import { logoAssets } from '../lib/data';
---

<MainLayout title="Asset Library - Logos" description="Browse and download company logos">
  <div class="container py-8">
    <div class="mb-8">
      <h1 class="text-3xl font-bold tracking-tight">Logos</h1>
      <p class="text-muted-foreground">
        Browse and download company logos in various formats and orientations.
      </p>
    </div>
    
    <SearchAndFilter placeholder="Search logos..." assetType="logo" />
    
    <div id="logos-grid">
      <CategoryGrid 
        assets={logoAssets} 
        emptyMessage="No logos found matching your search criteria."
      />
    </div>
  </div>
</MainLayout>

<script>
  import type { Asset } from '../lib/types';
  import { logoAssets } from '../lib/data';
  
  // DOM elements
  const logosGrid = document.getElementById('logos-grid');
  
  // Filter and render assets
  document.addEventListener('filterchange', (e: CustomEvent) => {
    if (!logosGrid) return;
    
    const { search, format, sort } = e.detail;
    
    // Filter assets
    let filteredAssets = [...logoAssets];
    
    // Apply search filter
    if (search) {
      const searchLower = search.toLowerCase();
      filteredAssets = filteredAssets.filter(asset => 
        asset.name.toLowerCase().includes(searchLower) || 
        asset.description?.toLowerCase().includes(searchLower) ||
        asset.tags?.some(tag => tag.toLowerCase().includes(searchLower))
      );
    }
    
    // Apply format filter
    if (format) {
      filteredAssets = filteredAssets.filter(asset => 
        asset.format.toLowerCase() === format.toLowerCase()
      );
    }
    
    // Apply sorting
    filteredAssets.sort((a, b) => {
      switch (sort) {
        case 'name-asc':
          return a.name.localeCompare(b.name);
        case 'name-desc':
          return b.name.localeCompare(a.name);
        case 'size-asc':
          return (parseInt(a.fileSize || '0') || 0) - (parseInt(b.fileSize || '0') || 0);
        case 'size-desc':
          return (parseInt(b.fileSize || '0') || 0) - (parseInt(a.fileSize || '0') || 0);
        default:
          return 0;
      }
    });
    
    // Render filtered assets
    renderAssets(filteredAssets);
  });
  
  // Initial render
  function renderAssets(assets: Asset[]) {
    if (!logosGrid) return;
    
    if (assets.length === 0) {
      logosGrid.innerHTML = `
        <div class="flex h-[200px] items-center justify-center rounded-md border border-dashed">
          <div class="text-center">
            <h3 class="text-lg font-medium">No logos found</h3>
            <p class="text-sm text-muted-foreground">Try adjusting your search or filters</p>
          </div>
        </div>
      `;
      return;
    }
    
    // Create a CategoryGrid component with the filtered assets
    const categoryGridHTML = `
      <div class="space-y-6">
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
          ${assets.map(asset => renderAssetCard(asset)).join('')}
        </div>
      </div>
    `;
    
    logosGrid.innerHTML = categoryGridHTML;
    
    // Add event listeners to the newly rendered buttons
    setupEventListeners();
  }
  
  // Render a single asset card
  function renderAssetCard(asset: Asset) {
    // Helper function to format file size
    const formatFileSize = (fileSize: string | undefined): string => {
      return fileSize || "N/A";
    };
    
    // Helper function to get appropriate preview based on asset type
    const getPreview = (asset: Asset): string => {
      if (asset.type === "color" && asset.colorValues?.hex) {
        return `<div class="h-32 w-full rounded-md" style="background-color: ${asset.colorValues.hex};"></div>`;
      }
      
      if (asset.type === "font") {
        return `<div class="h-32 w-full flex items-center justify-center text-2xl" style="font-family: '${asset.name}', sans-serif;">Aa Bb Cc 123</div>`;
      }
      
      return `<img src="${asset.previewUrl}" alt="${asset.name}" class="h-32 w-full object-contain" />`;
    };
    
    // Generate tags HTML if asset has tags
    const tagsHTML = asset.tags ? 
      `<div class="flex flex-wrap gap-1">
        ${asset.tags.map(tag => 
          `<div class="inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-medium">${tag}</div>`
        ).join('')}
      </div>` : '';
    
    // Generate metadata HTML
    const metadataHTML = `
      <div class="grid grid-cols-2 gap-2 text-xs text-muted-foreground">
        ${asset.format ? `<div><span class="font-medium">Format:</span> ${asset.format}</div>` : ''}
        ${asset.fileSize ? `<div><span class="font-medium">Size:</span> ${formatFileSize(asset.fileSize)}</div>` : ''}
        ${asset.dimensions ? `<div><span class="font-medium">Dimensions:</span> ${asset.dimensions}</div>` : ''}
      </div>
    `;
    
    // Generate variants HTML if asset has variants
    const variantsHTML = asset.variants && asset.variants.length > 0 ? 
      `<div class="mt-4 pt-4 border-t">
        <h4 class="text-sm font-medium mb-2">Variants</h4>
        <div class="space-y-2">
          ${asset.variants.map(variant => `
            <div class="flex items-center justify-between text-sm">
              <span>${variant.name}</span>
              <div class="flex gap-2">
                <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-7 px-2 download-btn" data-path="${variant.path}">
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
                </button>
              </div>
            </div>
          `).join('')}
        </div>
      </div>` : '';
    
    // Return the complete asset card HTML
    return `
      <div class="group relative overflow-hidden rounded-lg border bg-card p-4 shadow-sm transition-all hover:shadow-md">
        <div class="mb-4">
          <!-- Preview section -->
          <div class="overflow-hidden rounded-md bg-muted">
            ${getPreview(asset)}
          </div>
        </div>
        
        <div class="space-y-2">
          <h3 class="font-medium">${asset.name}</h3>
          
          ${asset.description ? `<p class="text-sm text-muted-foreground">${asset.description}</p>` : ''}
          
          ${tagsHTML}
          
          <!-- Metadata section -->
          ${metadataHTML}
          
          <!-- Action buttons -->
          <div class="flex flex-wrap gap-2 pt-2">
            <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-9 px-4 py-2 download-btn" data-path="${asset.path}">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
              Download
            </button>
            
            <button class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-9 px-4 py-2 copy-btn" data-value="${asset.path}">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path></svg>
              Copy URL
            </button>
          </div>
          
          <!-- Variants section (if any) -->
          ${variantsHTML}
        </div>
      </div>
    `;
  }
  
  // Setup event listeners for the download and copy buttons
  function setupEventListeners() {
    // Handle download button clicks
    document.querySelectorAll('.download-btn').forEach(button => {
      button.addEventListener('click', () => {
        const path = (button as HTMLElement).dataset.path;
        if (path) {
          const link = document.createElement('a');
          link.href = path;
          link.download = path.split('/').pop() || 'asset';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          
          // Show feedback using toast
          showToast('Asset downloaded successfully');
        }
      });
    });
    
    // Handle copy button clicks
    document.querySelectorAll('.copy-btn').forEach(button => {
      button.addEventListener('click', () => {
        const value = (button as HTMLElement).dataset.value;
        if (value) {
          navigator.clipboard.writeText(value).then(() => {
            // Show feedback using toast
            showToast('Copied to clipboard');
          });
        }
      });
    });
  }
  
  // Simple toast function
  function showToast(message: string) {
    const toast = document.createElement('div');
    toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg';
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.opacity = '0';
      toast.style.transition = 'opacity 0.5s ease';
      setTimeout(() => {
        document.body.removeChild(toast);
      }, 500);
    }, 3000);
  }
</script>
