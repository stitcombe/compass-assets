---
import type { Asset } from "../lib/types";
import { Button } from "./ui/button";
import { Badge } from "./ui/badge";
import { toast } from "sonner";

interface Props {
  asset: Asset;
}

const { asset } = Astro.props;

// Helper function to format file size
function formatFileSize(fileSize: string | undefined): string {
  return fileSize || "N/A";
}

// Helper function to get appropriate preview based on asset type
function getPreview(asset: Asset): string {
  if (asset.type === "color" && asset.colorValues?.hex) {
    return `<div class="h-32 w-full rounded-md" style="background-color: ${asset.colorValues.hex};"></div>`;
  }
  
  if (asset.type === "font") {
    return `<div class="h-32 w-full flex items-center justify-center text-2xl" style="font-family: '${asset.name}', sans-serif;">Aa Bb Cc 123</div>`;
  }
  
  return `<img src="${asset.previewUrl}" alt="${asset.name}" class="h-32 w-full object-contain" />`;
}

// Helper function to copy to clipboard
function copyToClipboard(text: string): void {
  navigator.clipboard.writeText(text);
}
---

<div class="group relative overflow-hidden rounded-lg border bg-card p-4 shadow-sm transition-all hover:shadow-md">
  <div class="mb-4">
    <!-- Preview section -->
    <div class="overflow-hidden rounded-md bg-muted">
      <Fragment set:html={getPreview(asset)} />
    </div>
  </div>
  
  <div class="space-y-2">
    <h3 class="font-medium">{asset.name}</h3>
    
    {asset.description && <p class="text-sm text-muted-foreground">{asset.description}</p>}
    
    <div class="flex flex-wrap gap-1">
      {asset.tags && asset.tags.map((tag) => (
        <Badge variant="outline">{tag}</Badge>
      ))}
    </div>
    
    <!-- Metadata section -->
    <div class="grid grid-cols-2 gap-2 text-xs text-muted-foreground">
      {asset.format && <div><span class="font-medium">Format:</span> {asset.format}</div>}
      {asset.fileSize && <div><span class="font-medium">Size:</span> {formatFileSize(asset.fileSize)}</div>}
      {asset.dimensions && <div><span class="font-medium">Dimensions:</span> {asset.dimensions}</div>}
      
      {asset.type === "color" && asset.colorValues && (
        <>
          <div><span class="font-medium">HEX:</span> {asset.colorValues.hex}</div>
          <div><span class="font-medium">RGB:</span> {asset.colorValues.rgb}</div>
          <div><span class="font-medium">HSL:</span> {asset.colorValues.hsl}</div>
        </>
      )}
      
      {asset.type === "font" && (
        <>
          {asset.fontWeights && <div><span class="font-medium">Weights:</span> {asset.fontWeights.join(", ")}</div>}
          {asset.fontStyles && <div><span class="font-medium">Styles:</span> {asset.fontStyles.join(", ")}</div>}
        </>
      )}
    </div>
    
    <!-- Action buttons -->
    <div class="flex flex-wrap gap-2 pt-2">
      <Button size="sm" className="download-btn" data-path={asset.path}>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
        Download
      </Button>
      
      <Button variant="outline" size="sm" className="copy-btn" data-value={asset.path}>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path></svg>
        Copy URL
      </Button>
      
      {asset.type === "color" && asset.colorValues && (
        <Button variant="outline" size="sm" className="copy-btn" data-value={asset.colorValues.hex}>
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M21 12a9 9 0 0 1-9 9m9-9a9 9 0 0 0-9-9m9 9H3m9 9a9 9 0 0 1-9-9m9 9c1.66 0 3-4.03 3-9s-1.34-9-3-9m0 18c-1.66 0-3-4.03-3-9s1.34-9 3-9"></path></svg>
          Copy HEX
        </Button>
      )}
    </div>
    
    <!-- Variants section (if any) -->
    {asset.variants && asset.variants.length > 0 && (
      <div class="mt-4 pt-4 border-t">
        <h4 class="text-sm font-medium mb-2">Variants</h4>
        <div class="space-y-2">
          {asset.variants.map((variant) => (
            <div class="flex items-center justify-between text-sm">
              <span>{variant.name}</span>
              <div class="flex gap-2">
                <Button size="sm" variant="outline" className="h-7 px-2 download-btn" data-path={variant.path}>
                  <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>
                </Button>
              </div>
            </div>
          ))}
        </div>
      </div>
    )}
  </div>
</div>

<script>
  // Import the toast function from sonner
  import { toast } from "sonner";

  // Handle download button clicks
  document.querySelectorAll('.download-btn').forEach(button => {
    button.addEventListener('click', () => {
      const path = (button as HTMLElement).dataset.path;
      if (path) {
        const link = document.createElement('a');
        link.href = path;
        link.download = path.split('/').pop() || 'asset';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Show feedback using sonner toast
        toast.success('Asset downloaded successfully');
      }
    });
  });
  
  // Handle copy button clicks
  document.querySelectorAll('.copy-btn').forEach(button => {
    button.addEventListener('click', () => {
      const value = (button as HTMLElement).dataset.value;
      if (value) {
        navigator.clipboard.writeText(value).then(() => {
          // Show feedback using sonner toast
          toast.success('Copied to clipboard');
        });
      }
    });
  });
</script>
